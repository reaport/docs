openapi: 3.0.0
info:
  title: "Catering API"
  description: |
    API для управления процессом доставки питания (кейтеринг).
    При запросе машины кейтеринга оркестратор передаёт следующие данные:
      - flightId: идентификатор рейса.
      - meals: список объектов, где для каждого типа питания указывается количество порций.
  version: 1.0.0

paths:
  /request:
    post:
      summary: "Запрос на доставку питания"
      description: |
        Оркестратор инициирует доставку питания, передавая следующие данные:
          - flightId: идентификатор рейса.
          - meals: массив, в котором для каждого типа питания (например, "Standard", "Vegetarian" и т.д.)
                    указывается количество порций для доставки.
      operationId: RequestCatering
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CateringRequest'
      responses:
        '200':
          description: "Доставка питания успешно инициирована"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CateringResponse'
              examples:
                ValidRequest:
                  value:
                    Status: "success"
        '400':
          description: "Неверный запрос: отсутствует обязательное поле или неверно указано количество порций для одного из типов питания."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CateringErrorResponse'
              examples:
                MissingFlightId:
                  value:
                    errorCode: 101
                    message: "FlightId is required"
                InvalidMealOrder:
                  value:
                    errorCode: 102
                    message: "Each meal order must have a valid mealType and a non-negative count"
        '500':
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CateringErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"

  /mealtypes:
    get:
      summary: "Получение доступных типов питания"
      description: |
        Модуль регистрации запрашивает у кейтеринга список заложенных типов питания,
        чтобы отобразить покупателю доступные варианты.
      operationId: GetMealTypes
      responses:
        '200':
          description: "Список доступных типов питания успешно получен"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealTypesResponse'
              examples:
                DefaultMealTypes:
                  value:
                    mealTypes: ["Standard", "Vegetarian", "Vegan", "Gluten-Free"]
        '500':
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CateringErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"

components:
  schemas:
    CateringRequest:
      type: object
      properties:
        flightId:
          type: string
          description: "Идентификатор рейса, для которого осуществляется доставка питания."
        meals:
          type: array
          description: "Массив объектов, где для каждого типа питания указывается количество порций для доставки."
          items:
            $ref: '#/components/schemas/MealOrder'
      required:
        - flightId
        - meals

    MealOrder:
      type: object
      properties:
        mealType:
          type: string
          description: "Тип питания (например, 'Standard', 'Vegetarian', 'Vegan', 'Gluten-Free')."
        count:
          type: integer
          minimum: 0
          description: "Количество порций для данного типа питания."
      required:
        - mealType
        - count

    CateringResponse:
      type: object
      properties:
        Status:
          type: string
          description: "Статус операции (например, 'success')."
      required:
        - Status

    CateringErrorResponse:
      type: object
      properties:
        errorCode:
          type: integer
          description: "Код ошибки."
        message:
          type: string
          description: "Сообщение об ошибке."
      required:
        - errorCode
        - message

    MealTypesResponse:
      type: object
      properties:
        mealTypes:
          type: array
          items:
            type: string
          description: "Список доступных типов питания."
      required:
        - mealTypes
