openapi: 3.0.0
info:
  title: "Catering API"
  description: |
    API для управления процессом доставки питания (кейтеринг) и административных функций.
    Включает эндпоинты для обновления конфигурации, типов питания, вместимости транспорта, а также для регистрации транспортных средств и перезагрузки приложения.
  version: "1.0.0"

servers:
  - url: https://catering.reaport.ru
    description: "Основной сервер для кейтеринга"

tags:
  - name: catering
    description: "Публичные эндпоинты для кейтеринга"
  - name: admin
    description: "Административные эндпоинты"

paths:
  /request:
    post:
      tags:
        - catering
      summary: "Запрос на доставку питания"
      description: |
        Оркестратор (или любой внешний сервис) инициирует доставку питания, передавая:
          - AircraftId (идентификатор самолёта)
          - NodeId (необязательно, узел назначения)
          - Meals (список объектов, где указывается тип питания и количество порций)
      operationId: RequestCatering
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CateringRequest"
      responses:
        "200":
          description: "Доставка питания успешно инициирована"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CateringResponse"
        "400":
          description: "Неверный запрос: отсутствует обязательное поле или некорректные данные"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /mealtypes:
    get:
      tags:
        - catering
      summary: "Получение доступных типов питания"
      description: |
        Возвращает актуальный список типов питания, который может быть изменён через админку.
      operationId: GetMealTypes
      responses:
        "200":
          description: "Список типов питания успешно получен"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealTypesResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/update:
    post:
      tags:
        - admin
      summary: "Обновление конфигурации приложения"
      description: "Позволяет обновить настройки конфигурации (число повторов, кол-во регистрируемых ТС)."
      operationId: UpdateConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateConfigRequest"
      responses:
        "200":
          description: "Конфигурация успешно обновлена"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: "Неверный запрос: некорректные данные"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/toggleMode:
    post:
      tags:
        - admin
      summary: "Переключение режима Mock/Real"
      description: "Переключает режим работы между Mock и Real."
      operationId: ToggleMode
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                useMock:
                  type: string
                  description: "Строка 'true' или 'false'"
      responses:
        "200":
          description: "Режим работы успешно переключён"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/updateMealTypes:
    post:
      tags:
        - admin
      summary: "Обновление списка типов питания"
      description: |
        Принимает JSON-объект вида:
        {
          "MealTypes": ["Standard", "Vegetarian", ...]
        }
        и обновляет список допустимых типов питания.
      operationId: UpdateMealTypes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MealTypesResponse"
      responses:
        "200":
          description: "Список типов питания успешно обновлён"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: "Неверный запрос: некорректные данные"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/updateCapacityAdmin:
    post:
      tags:
        - admin
      summary: "Обновление вместимости транспортного средства"
      description: |
        Принимает JSON-объект вида:
        {
          "Capacity": 150
        }
        и устанавливает новую вместимость (количество порций).
      operationId: UpdateCapacity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleCapacity"
      responses:
        "200":
          description: "Вместимость успешно обновлена"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  capacity:
                    type: number
        "400":
          description: "Неверный запрос: некорректные данные вместимости"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/registerVehicle:
    post:
      tags:
        - admin
      summary: "Регистрация транспортного средства"
      description: |
        Регистрирует заданное число транспортных средств (по конфигурации).
        Принимает JSON-объект вида:
        {
          "Type": "catering"
        }
      operationId: RegisterVehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterVehicleRequest"
      responses:
        "200":
          description: "Транспортные средства успешно зарегистрированы"
          content:
            application/json:
              schema:
                type: object
                properties:
                  registeredVehicles:
                    type: integer
                  message:
                    type: string
        "400":
          description: "Неверный запрос: некорректный тип"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/reload:
    post:
      tags:
        - admin
      summary: "Полная перезагрузка приложения"
      description: |
        Сбрасывает все данные и переинициализирует внутренние структуры (реестр ТС и счётчики).
      operationId: Reload
      responses:
        "200":
          description: "Приложение перезагружено"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    CateringRequest:
      type: object
      properties:
        AircraftId:
          type: string
          description: "Идентификатор самолёта"
        NodeId:
          type: string
          description: "Идентификатор узла"
        Meals:
          type: array
          items:
            $ref: "#/components/schemas/MealOrder"
          description: "Список заказов (тип питания + количество порций)"
      required:
        - AircraftId
        - Meals

    MealOrder:
      type: object
      properties:
        MealType:
          type: string
          description: "Тип питания (например, 'Standard', 'Vegetarian' и т.д.)"
        Count:
          type: integer
          minimum: 0
          description: "Количество порций"
      required:
        - MealType
        - Count

    MealTypesResponse:
      type: object
      properties:
        MealTypes:
          type: array
          items:
            type: string
          description: "Список допустимых типов питания"
      required:
        - MealTypes

    RegisterVehicleRequest:
      type: object
      properties:
        Type:
          type: string
          description: "Тип регистрируемого ТС (например, 'catering')"
      required:
        - Type

    UpdateConfigRequest:
      type: object
      properties:
        ConflictRetryCount:
          type: integer
          description: "Число повторов при конфликте"
        NumberOfCateringVehicles:
          type: integer
          description: "Количество ТС, регистрируемых за один вызов"
      required:
        - ConflictRetryCount
        - NumberOfCateringVehicles

    VehicleCapacity:
      type: object
      properties:
        Capacity:
          type: number
          description: "Вместимость транспортного средства (например, кол-во порций)"
      required:
        - Capacity

    CateringResponse:
      type: object
      properties:
        Waiting:
          type: boolean
          description: "Указывает, ожидается ли транспорт"
        Status:
          type: string
          description: "Статус операции (например, 'success')"
      required:
        - Waiting
        - Status

    ErrorResponse:
      type: object
      properties:
        Error:
          type: string
          description: "Сообщение об ошибке"
      required:
        - Error
