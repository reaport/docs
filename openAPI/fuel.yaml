openapi: 3.0.0
info:
  title: Fuel API
  description: |
    API для управления процессом заправки самолётов топливом. Для подробной информации смотрите [документацию](https://docs.google.com/document/d/1-A99pLnf-T3KJgUowspAIestsUUSzbDQ0Sfr5KvSmdI/edit?tab=t.g0yqyiv1tqaa).
  version: 1.0.0

servers:
  - url: https://fuel.reaport.ru
    description: Сервер для заправки самолёта

paths:
  /request:
    post:
      summary: Запрос заправки
      description: |
        После высадки пассажиров оркестратор отправляет запрос на заправку.
        Если количество топлива меньше 0, его значение обрабатывается как 0, и заправка не требуется.
        В процессе обработки запроса производится проверка наличия свободных машин. Если свободные машины отсутствуют, возвращаем уведомление о необходимости ожидания.
      operationId: RequestRefueling
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRefuelingInput'
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestRefuelingResponse'
              examples:
                ValidRequest:
                  value:
                    wait: true
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestRefuelingErrorResponse'
              examples:
                MissingNodeId:
                  value:
                    errorCode: 100
                    message: "NodeId is required"
                MissingFuelNeeded:
                  value:
                    errorCode: 101
                    message: "FuelNeeded is required"
                InvalidFuelAmount:
                  value:
                    errorCode: 102
                    message: "FuelNeeded must be a non-negative integer"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestRefuelingErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"

  # Методы админки
  /admin:
    get:
      summary: Отобразить административную панель
      description: Возвращает HTML-страницу административной панели с возможностью настройки параметров и просмотра списка транспортных средств.
      tags:
        - admin
      operationId: admin_getPanel
      responses:
        '200':
          description: HTML-страница админки

  /admin/update-parameters:
    post:
      summary: Обновить конфигурационные параметры
      description: Обновляет глобальные параметры, такие как количество повторных попыток при конфликте.
      tags:
        - admin
      operationId: admin_updateParameters
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                conflictRetryCount:
                  type: integer
                  description: Количество повторных попыток при конфликте
              required:
                - conflictRetryCount
      responses:
        '200':
          description: Параметры успешно обновлены.

  /admin/register:
    post:
      summary: Зарегистрировать новое транспортное средство
      description: Регистрирует новое транспортное средство через административную панель.
      tags:
        - admin
      operationId: admin_registerVehicle
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                vehicleType:
                  type: string
                  description: Тип транспортного средства (например, "refueling")
              required:
                - vehicleType
      responses:
        '200':
          description: Транспортное средство успешно зарегистрировано.

  /admin/restart:
    post:
      summary: Перезагрузка приложения
      description: Перезапускает приложение
      tags:
        - admin
      operationId: admin_restart
      responses:
        '200':
          description: Приложение перезапущено.

components:
  schemas:
    RequestRefuelingInput:
      type: object
      properties:
        NodeId:
          type: string
          description: Идентификатор узла самолета (например, "node 1").
        FuelNeeded:
          type: integer
          description: Количество топлива, необходимое для заправки (в литрах). Может быть 0 или больше.
        AirplaneId:
          type: string
          description: Идентификатор самолёта.
      required:
        - NodeId
        - FuelNeeded
        - AirplaneId

    RequestRefuelingResponse:
      type: object
      properties:
        wait:
          type: boolean
          description: Флаг, указывающий, что необходимо ожидание свободных машин.
      required:
        - wait

    RequestRefuelingErrorResponse:
      type: object
      properties:
        errorCode:
          type: integer
          description: Код ошибки.
        message:
          type: string
          description: Сообщение об ошибке.
      required:
        - errorCode
        - message
