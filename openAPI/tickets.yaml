openapi: 3.0.0
info:
  title: API для модуля покупки и возврата билетов
  version: "1.0.0"
  description: >
    Модуль «Покупка и возврат билетов» предоставляет пассажирам возможность:
      - Выбирать направление полёта из доступных рейсов (данные получаются у модуля «Табло»)
      - Выбирать дополнительные опции (класс обслуживания, питание, багаж)
      - Покупать билеты
      - Возвращать билеты (до начала регистрации)
    
    Модуль взаимодействует с:
      - «Табло» (для получения информации о рейсах),
      - «Кейтеринг» (для получения списка доступных типов питания),
      - «Регистрация» (передача данных о купленных билетах).
    
    При недоступности модуля «Табло» продажа билетов блокируется (возвращается ошибка 500),
    а функционал возврата билетов остается доступным до начала регистрации.
servers:
  - url: https://tickets.reaport.ru
    description: Сервер для покупки и возврата билетов
tags:
  - name: tickets
    description: Эндпоинты для операций с билетами (покупка, возврат, информация)
paths:
  /buy:
    post:
      tags:
        - tickets
      summary: Покупка билета
      description: |
        Позволяет приобрести билет на выбранный рейс.
        Если внешний сервис (Табло или Кейтеринг) недоступен или выбран неверный рейс,
        покупка блокируется.
        Входные данные:
          - passengerId: уникальный идентификатор пассажира.
          - flightId: идентификатор рейса.
          - seatClass: класс обслуживания ("economy" или "business").
          - mealType: выбранный тип питания (если не указан, возвращаются варианты питания).
          - baggage: признак сдачи багажа ("да" или "нет").
        При успешной покупке создаётся билет, уменьшается количество мест, и возвращаются:
          - ticketId: уникальный идентификатор билета.
          - direction: маршрут рейса.
          - departureTime: время вылета рейса.
          - status: статус операции ("куплен").
      operationId: buyTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                passengerId:
                  type: string
                  description: Уникальный идентификатор пассажира.
                flightId:
                  type: string
                  description: Идентификатор рейса.
                seatClass:
                  type: string
                  enum: [economy, business]
                  description: Класс обслуживания.
                mealType:
                  type: string
                  description: Код или название желаемого типа питания.
                baggage:
                  type: string
                  enum: [да, нет]
                  description: Признак сдачи багажа.
              required:
                - passengerId
                - flightId
                - seatClass
                - baggage
      responses:
        '200':
          description: Билет успешно куплен.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticketId:
                    type: string
                    description: Уникальный идентификатор билета.
                  direction:
                    type: string
                    description: Маршрут рейса.
                  departureTime:
                    type: string
                    format: date-time
                    description: Время вылета рейса.
                  status:
                    type: string
                    description: Статус операции ("куплен").
        '400':
          description: Некорректные входные данные или неверный тип питания.
        '409':
          description: Нарушение бизнес-правил: пассажир уже имеет билет или регистрация началась.
        '500':
          description: Внутренняя ошибка модуля или недоступность внешнего сервиса Табло/Кейтеринг.
  /cancel/{ticketId}:
    post:
      tags:
        - tickets
      summary: Возврат билета
      description: |
        Позволяет вернуть ранее купленный билет до начала регистрации.
        Если регистрация уже началась или билет не найден/не принадлежит пассажиру, возврат невозможен.
      operationId: cancelTicket
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор билета.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                passengerId:
                  type: string
                  description: Идентификатор пассажира (для проверки владения билетом).
              required:
                - passengerId
      responses:
        '200':
          description: Билет успешно возвращён.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticketId:
                    type: string
                  status:
                    type: string
                    description: Статус операции ("возвращён").
        '400':
          description: Некорректные параметры запроса.
        '404':
          description: Билет не найден или не принадлежит пассажиру.
        '409':
          description: Возврат невозможен, так как регистрация уже началась.
        '422':
          description: Билет уже возвращён или находится в некорректном состоянии.
        '500':
          description: Внутренняя ошибка модуля.
  /{ticketId}/status:
    get:
      tags:
        - tickets
      summary: Получение статуса билета
      description: Возвращает текущий статус билета ("куплен", "возвращён", "зарегистрирован").
      operationId: getTicketStatus
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор билета.
      responses:
        '200':
          description: Статус билета успешно получен.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticketId:
                    type: string
                  status:
                    type: string
                    description: Текущий статус билета.
        '404':
          description: Билет не найден.
  /{ticketId}/details:
    get:
      tags:
        - tickets
      summary: Получение деталей билета
      description: |
        Возвращает полную информацию о билете:
          - идентификатор пассажира,
          - идентификатор рейса,
          - маршрут (город отправления -> город прибытия),
          - время вылета,
          - класс обслуживания,
          - выбранный тип питания,
          - признак багажа,
          - текущий статус.
      operationId: getTicketDetails
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор билета.
      responses:
        '200':
          description: Детали билета успешно получены.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticketId:
                    type: string
                  passengerId:
                    type: string
                  flightId:
                    type: string
                  direction:
                    type: string
                    description: Маршрут рейса.
                  departureTime:
                    type: string
                    format: date-time
                    description: Время вылета.
                  seatClass:
                    type: string
                    enum: [economy, business]
                  mealType:
                    type: string
                    description: Выбранный тип питания.
                  baggage:
                    type: string
                    enum: [да, нет]
                  status:
                    type: string
                    description: Текущий статус билета.
        '404':
          description: Билет не найден.
  /flight/{flightId}/passengers:
    get:
      tags:
        - tickets
      summary: Получение списка пассажиров для рейса
      description: |
        Возвращает список пассажиров, у которых куплены билеты (со статусом "куплен") на указанный рейс.
        При вызове данного метода для рейса регистрация помечается как начатая, что блокирует дальнейшую покупку/возврат.
      operationId: getPassengersForFlight
      parameters:
        - name: flightId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор рейса.
      responses:
        '200':
          description: Список пассажиров успешно получен.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    passengerId:
                      type: string
                      description: Уникальный идентификатор пассажира.
                    seatClass:
                      type: string
                      enum: [economy, business]
                      description: Класс обслуживания.
                    mealType:
                      type: string
                      description: Выбранный тип питания.
                    baggage:
                      type: string
                      enum: [да, нет]
                      description: Признак багажа.
        '400':
          description: Некорректные параметры (например, отсутствует flightId).
        '404':
          description: Рейс не найден или пассажиры отсутствуют.
        '408':
          description: Тайм-аут при обращении к модулю.
        '422':
          description: Переданные данные не соответствуют ожидаемой схеме.
        '503':
          description: Модуль временно недоступен.
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: integer
          description: Код ошибки.
        message:
          type: string
          description: Описание ошибки.
