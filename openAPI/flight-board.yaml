openapi: 3.0.0
info:
  title: Airport Management API
  version: 1.0.0
  description: API для управления аэропортом

servers:
  - url: https://flight-board.reaport.ru
    description: Сервер для табло

paths:
  /tickets/available:
    get:
      summary: Получение списка доступных рейсов
      description: |
        Метод возвращает список всех доступных рейсов с информацией о доступных местах по классам обслуживания.
        Данные включают идентификатор рейса, города вылета и прилета, время вылета и информацию о доступных местах.
      operationId: GetAvailableFlights
      responses:
        '200':
          description: Успешное получение списка доступных рейсов
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    flightId:
                      type: string
                      description: Идентификатор рейса
                    cityFrom:
                      type: string
                      example: "Мосипск"
                      description: Город вылета
                    cityTo:
                      type: string
                      example: "Москва"
                      description: Город прибытия
                    takeoffDateTime:
                      type: string
                      format: date-time
                      description: Время вылета
                    availableSeats:
                      type: array
                      items:
                        type: object
                        properties:
                          seatClass:
                            type: string
                            enum: [economy, business]
                            description: Класс обслуживания
                          seatCount:
                            type: integer
                            description: Количество доступных мест для данного класса
              examples:
                ValidResponse:
                  value:
                    - flightId: "FL123"
                      cityFrom: "Мосипск"
                      cityTo: "Москва"
                      takeoffDateTime: "2025-03-02T20:30:00Z"
                      availableSeats:
                        - seatClass: "economy"
                          seatCount: 50
                        - seatClass: "business"
                          seatCount: 20
                    - flightId: "FL124"
                      cityFrom: "Москва"
                      cityTo: "Санкт-Петербург"
                      takeoffDateTime: "2025-03-03T10:00:00Z"
                      availableSeats:
                        - seatClass: "economy"
                          seatCount: 100
                        - seatClass: "business"
                          seatCount: 30
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"
                    
  /api/ticketdata/tickets:
    post:
      summary: Сохранение данных о покупке билетов
      description: |
        Метод для сохранения информации о покупке билетов.
        Принимает данные о купленных местах и багаже.
      operationId: SaveTicketPurchaseInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketPurchaseSaveRequest'
            examples:
              ExampleRequest:
                value:
                  purchasedSeats:
                    - seatClass: "economy"
                      seatNumber: "A1"
                    - seatClass: "business"
                      seatNumber: "B2"
                  baggage: "1 checked bag, 1 carry-on"
      responses:
        '200':
          description: Успешное сохранение данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Ticket purchase info saved successfully"
        '400':
          description: Ошибка валидации входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                MissingPurchasedSeats:
                  value:
                    errorCode: 600
                    message: "PurchasedSeats is required"
                MissingBaggage:
                  value:
                    errorCode: 601
                    message: "Baggage information is required"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"
                    
  /api/registration/register:
    get:
      summary: Получение информации о регистрации на рейс
      description: |
        Метод возвращает информацию о регистрации на рейс, включая данные о самолете и времени регистрации.
        Также отправляет эти данные в модуль регистрации.
      operationId: GetRegistrationInfo
      parameters:
        - name: flightId
          in: query
          required: true
          description: Идентификатор рейса
          schema:
            type: string
        - name: cityFrom
          in: query
          required: true
          description: Город вылета
          schema:
            type: string
        - name: cityTo
          in: query
          required: true
          description: Город прибытия
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение информации о регистрации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightRegistrationResponse'
              examples:
                ValidResponse:
                  value:
                    flightId: "FL123"
                    startRegisterTime: "2025-03-02T18:00:00Z"
                    startPlantingTime: "2025-03-02T19:00:00Z"
                    departureTime: "2025-03-02T20:30:00Z"
                    seatsAircraft:
                      - seatClass: "economy"
                        seatNumber: "A1"
                      - seatClass: "business"
                        seatNumber: "B2"
        '400':
          description: Ошибка валидации входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                MissingFlightId:
                  value:
                    errorCode: 100
                    message: "FlightId is required"
                MissingCities:
                  value:
                    errorCode: 102
                    message: "CityFrom and CityTo are required"
                InvalidCities:
                  value:
                    errorCode: 103
                    message: "Flight does not match the specified cities"
        '404':
          description: Рейс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                FlightNotFound:
                  value:
                    errorCode: 101
                    message: "Invalid FlightID"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"
                    
  /api/flightsettings/save:
    post:
      summary: Сохранение настроек рейсов
      description: |
        Метод для сохранения настроек рейсов, таких как временные интервалы между этапами.
        После сохранения настроек создается новый рейс с указанным городом назначения.
      operationId: SaveSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlightSettingsDto'
            examples:
              ExampleRequest:
                value:
                  purchaseToRegistrationMinutes: 30
                  registrationToBoardingMinutes: 20
                  boardingToEndBoardingMinutes: 10
                  endBoardingToDepartureMinutes: 5
                  destination: "Москва"
      responses:
        '200':
          description: Успешное сохранение настроек и создание рейса
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Ошибка валидации входных данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Настройки не могут быть пустыми."

  /api/flightsettings/get:
    get:
      summary: Получение текущих настроек рейсов
      description: |
        Метод возвращает текущие настройки рейсов, такие как временные интервалы между этапами.
      operationId: GetSettings
      responses:
        '200':
          description: Успешное получение настроек
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightSettings'

  /api/flightsettings/flights:
    get:
      summary: Получение списка рейсов
      description: |
        Метод возвращает список всех рейсов.
      operationId: GetFlights
      responses:
        '200':
          description: Успешное получение списка рейсов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepartureFlightGenerator'                  
  /api/flight/create:
    post:
      summary: Создание нового рейса
      description: |
        Метод для создания нового рейса с указанным городом назначения.
      operationId: CreateDepartureFlight
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destination:
                  type: string
                  description: Город назначения рейса
              required:
                - destination
            examples:
              ExampleRequest:
                value:
                  destination: "Москва"
      responses:
        '200':
          description: Успешное создание рейса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDto'
              examples:
                ValidResponse:
                  value:
                    flightId: "FL123"
                    cityFrom: "Мосипск"
                    cityTo: "Москва"
                    ticketSalesStart: "2025-03-02T10:00:00Z"
                    registrationStartTime: "2025-03-02T18:00:00Z"
                    registrationEndTime: "2025-03-02T19:00:00Z"
                    boardingStartTime: "2025-03-02T19:00:00Z"
                    boardingEndTime: "2025-03-02T19:10:00Z"
                    departureTime: "2025-03-02T20:30:00Z"
                    isBoardingClosed: false
                    isRegistrationClosed: false
                    isTicketSalesClosed: false
        '500':
          description: Внутренняя ошибка сервера
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"

  /api/flight/{flightId}/status:
    get:
      summary: Получение статуса рейса
      description: |
        Метод возвращает текущий статус рейса (например, "Продажа билетов открыта", "Посадка открыта" и т.д.).
      operationId: GetFlightStatus
      parameters:
        - name: flightId
          in: path
          required: true
          description: Идентификатор рейса
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение статуса рейса
          content:
            text/plain:
              schema:
                type: string
                example: "Продажа билетов открыта."
        '404':
          description: Рейс не найден
          content:
            text/plain:
              schema:
                type: string
                example: "Рейс не найден."

  /api/flight/all:
    get:
      summary: Получение списка всех рейсов
      description: |
        Метод возвращает список всех рейсов с подробной информацией о каждом.
      operationId: GetAllFlights
      responses:
        '200':
          description: Успешное получение списка рейсов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlightDto'
              examples:
                ValidResponse:
                  value:
                    - flightId: "FL123"
                      cityFrom: "Мосипск"
                      cityTo: "Москва"
                      ticketSalesStart: "2025-03-02T10:00:00Z"
                      registrationStartTime: "2025-03-02T18:00:00Z"
                      registrationEndTime: "2025-03-02T19:00:00Z"
                      boardingStartTime: "2025-03-02T19:00:00Z"
                      boardingEndTime: "2025-03-02T19:10:00Z"
                      departureTime: "2025-03-02T20:30:00Z"
                      isBoardingClosed: false
                      isRegistrationClosed: false
                      isTicketSalesClosed: false
                    - flightId: "FL124"
                      cityFrom: "Москва"
                      cityTo: "Санкт-Петербург"
                      ticketSalesStart: "2025-03-03T10:00:00Z"
                      registrationStartTime: "2025-03-03T18:00:00Z"
                      registrationEndTime: "2025-03-03T19:00:00Z"
                      boardingStartTime: "2025-03-03T19:00:00Z"
                      boardingEndTime: "2025-03-03T19:10:00Z"
                      departureTime: "2025-03-03T20:30:00Z"
                      isBoardingClosed: false
                      isRegistrationClosed: false
                      isTicketSalesClosed: false
        '500':
          description: Внутренняя ошибка сервера
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"      
  /api/city/allowed:
    get:
      summary: Получение списка разрешённых городов
      description: |
        Метод возвращает список городов, которые доступны для выбора в качестве города назначения или вылета.
      operationId: GetAllowedCities
      responses:
        '200':
          description: Успешное получение списка разрешённых городов
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Москва"
              examples:
                ValidResponse:
                  value:
                    - "Москва"
                    - "Санкт-Петербург"
                    - "Новосибирск"
                    - "Екатеринбург"
                    
  /api/arrivalflight/create:
    post:
      summary: Создание нового рейса на прилет
      description: |
        Метод для создания нового рейса на прилет с указанным городом вылета и смещением времени прибытия.
      operationId: CreateArrivalFlight
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrivalFlightSettings'
            examples:
              ExampleRequest:
                value:
                  departureCity: "Москва"
                  arrivalTimeOffset: 120
      responses:
        '200':
          description: Успешное создание рейса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrivalFlight'
              examples:
                ValidResponse:
                  value:
                    flightId: "AF123"
                    departureCity: "Москва"
                    arrivalTime: "2025-03-02T20:30:00Z"
        '400':
          description: Ошибка валидации входных данных
          content:
            text/plain:
              schema:
                type: string
                example: "Настройки рейса не могут быть пустыми."
        '500':
          description: Внутренняя ошибка сервера
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"

  /api/arrivalflight/{flightId}:
    get:
      summary: Получение информации о рейсе на прилет
      description: |
        Метод возвращает информацию о рейсе на прилет по его идентификатору.
      operationId: GetArrivalFlightInfo
      parameters:
        - name: flightId
          in: path
          required: true
          description: Идентификатор рейса
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение информации о рейсе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrivalFlight'
              examples:
                ValidResponse:
                  value:
                    flightId: "AF123"
                    departureCity: "Москва"
                    arrivalTime: "2025-03-02T20:30:00Z"
        '400':
          description: Ошибка валидации входных данных
          content:
            text/plain:
              schema:
                type: string
                example: "Идентификатор рейса не может быть пустым."
        '404':
          description: Рейс не найден
          content:
            text/plain:
              schema:
                type: string
                example: "Рейс не найден."
        '500':
          description: Внутренняя ошибка сервера
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"
                
  /api/arrivalflight/all:
    get:
      summary: Получение списка всех рейсов на прилет
      description: |
        Метод возвращает список всех рейсов на прилет.
      operationId: GetAllArrivalFlights
      responses:
        '200':
          description: Успешное получение списка рейсов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArrivalFlight'
              examples:
                ValidResponse:
                  value:
                    - flightId: "AF123"
                      departureCity: "Москва"
                      arrivalTime: "2025-03-02T20:30:00Z"
                    - flightId: "AF124"
                      departureCity: "Санкт-Петербург"
                      arrivalTime: "2025-03-03T10:00:00Z"
        '500':
          description: Внутренняя ошибка сервера
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"              
  /api/aircraftdeparture/aircraft-departure:
    get:
      summary: Получение информации о вылетающем самолете
      description: |
        Метод возвращает информацию о вылетающем самолете на основе переданных параметров:
        идентификатора рейса, времени начала и окончания посадки, а также списка купленных мест.
      operationId: GetAircraftDepartureInfo
      parameters:
        - name: flightId
          in: query
          required: true
          description: Идентификатор рейса
          schema:
            type: string
        - name: boardingStartTime
          in: query
          required: true
          description: Время начала посадки
          schema:
            type: string
            format: date-time
        - name: boardingEndTime
          in: query
          required: true
          description: Время окончания посадки
          schema:
            type: string
            format: date-time
        - name: boughtSeats
          in: query
          required: true
          description: Список купленных мест
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AvailableSeatsInfo'
      responses:
        '200':
          description: Успешное получение информации о вылетающем самолете
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AircraftDepartureResponse'
              examples:
                ValidResponse:
                  value:
                    flightId: "FL123"
                    boardingStartTime: "2025-03-02T19:00:00Z"
                    boardingEndTime: "2025-03-02T19:10:00Z"
        '400':
          description: Ошибка валидации входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                MissingFlightId:
                  value:
                    errorCode: 400
                    message: "FlightId is required"
                InvalidBoardingTimes:
                  value:
                    errorCode: 401
                    message: "Invalid boarding times provided"
                InvalidBoughtSeats:
                  value:
                    errorCode: 402
                    message: "Invalid bought seats format"
        '404':
          description: Рейс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                FlightNotFound:
                  value:
                    errorCode: 403
                    message: "Flight not found"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"              
               
  /api/aircraftdata/aircraft-departure:
    post:
      summary: Сохранение информации о вылетающем самолете
      description: |
        Метод для сохранения информации о вылетающем самолете, включая идентификатор самолета, доступные места и информацию о багаже.
      operationId: SaveAircraftDepartureInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AircraftDepartureSaveRequest'
            examples:
              ExampleRequest:
                value:
                  aircraftId: "AC123"
                  availableSeats:
                    - seatClass: "economy"
                      seatCount: 50
                    - seatClass: "business"
                      seatCount: 20
                  baggage: "1 checked bag, 1 carry-on"
      responses:
        '200':
          description: Успешное сохранение данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Aircraft departure info saved successfully"
        '400':
          description: Ошибка валидации входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                MissingAircraftId:
                  value:
                    errorCode: 500
                    message: "AircraftId is required"
                InvalidAvailableSeats:
                  value:
                    errorCode: 501
                    message: "Invalid available seats data"
                MissingBaggage:
                  value:
                    errorCode: 502
                    message: "Baggage information is required"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"              
                    
  /api/aircraft/aircraft-arrival:
    get:
      summary: Получение информации о прилетающем самолете
      description: |
        Метод возвращает информацию о прилетающем самолете на основе переданных параметров:
        времени прилета, количества занятых мест и информации о багаже.
      operationId: GetAircraftArrivalInfo
      parameters:
        - name: landingDateTimeToReaport
          in: query
          required: true
          description: Время прилета
          schema:
            type: string
            format: date-time
        - name: occupiedSeats
          in: query
          required: true
          description: Количество занятых мест
          schema:
            type: integer
            minimum: 1
        - name: baggageToReaport
          in: query
          required: true
          description: Информация о багаже
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение информации о прилетающем самолете
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AircraftArrivalResponse'
              examples:
                ValidResponse:
                  value:
                    landingDateTimeToReaport: "2025-03-02T20:30:00Z"
                    occupiedSeats: 150
                    baggageToReaport: "2 checked bags, 1 carry-on"
                    aircraftStatus: "Прибыл"
        '400':
          description: Ошибка валидации входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                MissingArrivalTime:
                  value:
                    errorCode: 300
                    message: "ArrivalTime is required"
                InvalidOccupiedSeats:
                  value:
                    errorCode: 301
                    message: "Invalid number of occupied seats"
                InvalidBaggage:
                  value:
                    errorCode: 302
                    message: "Invalid baggage capacity"
        '404':
          description: Самолет не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                AircraftNotFound:
                  value:
                    errorCode: 303
                    message: "Aircraft not found"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InternalServerError:
                  value:
                    errorCode: 500
                    message: "InternalServerError"
                    
components:
  schemas:
    TicketPurchaseSaveRequest:
      type: object
      properties:
        purchasedSeats:
          type: array
          items:
            type: object
            properties:
              seatClass:
                type: string
                enum: [economy, business]
                description: Класс обслуживания
              seatNumber:
                type: string
                description: Номер места
          description: Список купленных мест
        baggage:
          type: string
          description: Информация о багаже
      required:
        - purchasedSeats
        - baggage
  
    FlightRegistrationResponse:
      type: object
      properties:
        flightId:
          type: string
          description: Идентификатор рейса
        startRegisterTime:
          type: string
          format: date-time
          description: Время начала регистрации
        startPlantingTime:
          type: string
          format: date-time
          description: Время начала посадки
        departureTime:
          type: string
          format: date-time
          description: Время вылета
        seatsAircraft:
          type: array
          items:
            type: object
            properties:
              seatClass:
                type: string
                enum: [economy, business]
                description: Класс обслуживания
              seatNumber:
                type: string
                description: Номер места
          description: Список мест в самолете
          
    FlightSettingsDto:
      type: object
      properties:
        purchaseToRegistrationMinutes:
          type: integer
          description: Время между покупкой билета и началом регистрации (в минутах)
        registrationToBoardingMinutes:
          type: integer
          description: Время между началом регистрации и началом посадки (в минутах)
        boardingToEndBoardingMinutes:
          type: integer
          description: Время между началом и окончанием посадки (в минутах)
        endBoardingToDepartureMinutes:
          type: integer
          description: Время между окончанием посадки и вылетом (в минутах)
        destination:
          type: string
          description: Город назначения для нового рейса
      required:
        - purchaseToRegistrationMinutes
        - registrationToBoardingMinutes
        - boardingToEndBoardingMinutes
        - endBoardingToDepartureMinutes
        - destination

    FlightSettings:
      type: object
      properties:
        purchaseToRegistrationMinutes:
          type: integer
          description: Время между покупкой билета и началом регистрации (в минутах)
        registrationToBoardingMinutes:
          type: integer
          description: Время между началом регистрации и началом посадки (в минутах)
        boardingToEndBoardingMinutes:
          type: integer
          description: Время между началом и окончанием посадки (в минутах)
        endBoardingToDepartureMinutes:
          type: integer
          description: Время между окончанием посадки и вылетом (в минутах)

    DepartureFlightGenerator:
      type: object
      properties:
        flightId:
          type: string
          description: Идентификатор рейса
        destination:
          type: string
          description: Город назначения
        departureTime:
          type: string
          format: date-time
          description: Время вылета
        registrationStartTime:
          type: string
          format: date-time
          description: Время начала регистрации
        registrationEndTime:
          type: string
          format: date-time
          description: Время окончания регистрации
        boardingStartTime:
          type: string
          format: date-time
          description: Время начала посадки
        boardingEndTime:
          type: string
          format: date-time
          description: Время окончания посадки      
  
    FlightDto:
      type: object
      properties:
        flightId:
          type: string
          description: Идентификатор рейса
        cityFrom:
          type: string
          description: Город вылета
        cityTo:
          type: string
          description: Город назначения
        ticketSalesStart:
          type: string
          format: date-time
          description: Время начала продажи билетов
        registrationStartTime:
          type: string
          format: date-time
          description: Время начала регистрации
        registrationEndTime:
          type: string
          format: date-time
          description: Время окончания регистрации
        boardingStartTime:
          type: string
          format: date-time
          description: Время начала посадки
        boardingEndTime:
          type: string
          format: date-time
          description: Время окончания посадки
        departureTime:
          type: string
          format: date-time
          description: Время вылета
        isBoardingClosed:
          type: boolean
          description: Закрыта ли посадка
        isRegistrationClosed:
          type: boolean
          description: Закрыта ли регистрация
        isTicketSalesClosed:
          type: boolean
          description: Закрыта ли продажа билетов

    ArrivalFlightSettings:
      type: object
      properties:
        departureCity:
          type: string
          description: Город вылета
        arrivalTimeOffset:
          type: integer
          description: Смещение времени прибытия (в минутах)
      required:
        - departureCity
        - arrivalTimeOffset

    ArrivalFlight:
      type: object
      properties:
        flightId:
          type: string
          description: Идентификатор рейса
        departureCity:
          type: string
          description: Город вылета
        arrivalTime:
          type: string
          format: date-time
          description: Время прибытия

    AvailableSeatsInfo:
      type: object
      properties:
        seatClass:
          type: string
          enum: [economy, business]
          description: Класс обслуживания
        seatCount:
          type: integer
          description: Количество купленных мест для данного класса

    AircraftDepartureResponse:
      type: object
      properties:
        flightId:
          type: string
          description: Идентификатор рейса
        boardingStartTime:
          type: string
          format: date-time
          description: Время начала посадки
        boardingEndTime:
          type: string
          format: date-time
          description: Время окончания посадки

    AircraftDepartureSaveRequest:
      type: object
      properties:
        aircraftId:
          type: string
          description: Идентификатор самолета
        availableSeats:
          type: array
          items:
            $ref: '#/components/schemas/AvailableSeatsInfo'
          description: Список доступных мест по классам обслуживания
        baggage:
          type: string
          description: Информация о багаже
      required:
        - aircraftId
        - availableSeats
        - baggage

    AircraftArrivalResponse:
      type: object
      properties:
        landingDateTimeToReaport:
          type: string
          format: date-time
          description: Время прилета
        occupiedSeats:
          type: integer
          description: Количество занятых мест
        baggageToReaport:
          type: string
          description: Информация о багаже
        aircraftStatus:
          type: string
          description: Статус самолета (например, "Прибыл" или "Прибывает")
      required:
        - landingDateTimeToReaport
        - occupiedSeats
        - baggageToReaport
        - aircraftStatus

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: integer
          description: Код ошибки
        message:
          type: string
          description: Сообщение об ошибке